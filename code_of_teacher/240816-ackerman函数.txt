#include <stdio.h>

// 输出结果比对 https://blog.csdn.net/html_finder/article/details/125928848

#define M 5
#define N  20

#define TRUE 1
#define FALSE 0

// ackerman_func
void ackerman_func(int m, int n,
                   int ackerman_value[M][N],
                   int has_value[M][N])
{
    if (m == 0)
    {
        ackerman_value[m][n] = n+1;
        has_value[m][n] = TRUE;
        return;
    }//case1

    if (m!=0 && n==0)
    {
        if ( has_value[m-1][1] == FALSE)
            ackerman_func(m-1,1, ackerman_value,has_value);

        ackerman_value[m][n] = ackerman_value[m-1][1];
        has_value[m][n] =  has_value[m-1][1];
        return;
    }//case2

    if (m!=0 && n!=0)
    {
        //先算(m,n-1)
        if ( has_value[m][n-1] == FALSE)
            ackerman_func(m,n-1, ackerman_value,has_value);

        //算过之后，如果有值，就继续算，否则不继续算
        if ( has_value[m][n-1] ==TRUE)
        {
            int new_n = ackerman_value[m][n-1];

            if( new_n >=0 && new_n <=N-1)//坐标有效m-1,new_n，计算并且传导到m,n
            {
                if (has_value[m-1][new_n] == FALSE)
                    ackerman_func(m-1, new_n, ackerman_value,has_value);

                ackerman_value[m][n] = ackerman_value[m-1][new_n];
                has_value[m][n] =  has_value[m-1][new_n];
            }
        }
    }//case 3
}

// main
int main()
{
    int ackerman_value[M][N];
    int has_value[M][N]; //是否计算过

    int i,j;
    // init
    for(i=0; i<M; i++)// 0到M-1
        for(j=0; j<N; j++)// 0到N-1
        {
            ackerman_value[i][j] = 0;
            has_value[i][j] = FALSE;
        }

    // calculate
    for(i=0; i<M; i++)
        for(j=0; j<N; j++)
        {
            ackerman_func( i, j, ackerman_value,has_value);
        }

    // output
    for(i=0; i<M; i++)
    {
        for(j=0; j<N; j++)
        {
            if (has_value[i][j] == TRUE)
                printf("(%d,%d)%d ",i,j,ackerman_value[i][j]);
        }
        printf("\n");
    }

    return 0;
}
