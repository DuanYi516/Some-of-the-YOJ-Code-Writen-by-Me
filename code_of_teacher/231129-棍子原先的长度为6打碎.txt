// ----------------------------------------------------------------------------------------------------

有个长度6，尝试处理长度6，以它作为棍子原先长度
component 	5 1 5 2 1 2 5 1 2
use_or_not	0 0 0 0 0 0 0 0 0
		1 1 2 3 2 3  4 4 3

	尝试构造和为6的子集（子集编号no，当前子集的和，目标长度6）

	    	如果found==1，则直接返回
	    	当前子集的总和大于6
			do nothing，回溯到上一层级调用，进行其他尝试
	    	当前子集的总和为6
			如果没有剩下的配件，那么找到一种分配方案found=1，返回
			如果还有剩下的配件
				newno =no+1
				newno 子集的和为0
				递归（component ， use_or_not， newno , newno 的和，目标长度6）

	    	当前子集的总和小于6
			如果没有剩下的配件，返回（回溯到上一层级调用，进行其他尝试）
			如果有剩下的配件
				no不变
				尝试没有用过的配件index
					use_or_not[ index] = no // use
					修改当前子集总和
					向下递归（component ， use_or_not，no, 当前子集的和）
			                 	从下面回溯回到这里的时候，use_or_not[ index] = 0// not use
	
#include <stdio.h>

/*
5
5 1 2 2 2
9
5 1 5 2 1 2 5 1 2
*/

int found = 0;

// show
void show( int n, int component[100], int ifusing[100])
{
    int i;
    for(i=0; i<n; i++)
        printf("%d ",  component[i]);
    printf("\n");
    for(i=0; i<n; i++)
        printf("%d ",  ifusing[i]);
    printf("\n----------\n");
}

// try_huafen
void try_huafen( int n, int component[100], int used, int ifusing[100],//
                 int ziji_no, int ziji_sum, int target_len )
{
    if (found == 1) return;

    if ( ziji_sum > target_len)
    {
        // do nothing, back track to upper level call
    }
    else if (ziji_sum == target_len)
    {
        if ( used == n)
        {
            found = 1;
            return;
        }
        else // used <n
        {
            int ziji_no_new = ziji_no+1;
            int ziji_sum_new = 0;

            try_huafen( n, component, used, ifusing,//
                        ziji_no_new, ziji_sum_new, target_len );
        }
    }
    else//ziji_sum < target_len
    {
        if ( used == n)
        {
            // do nothing, back track to upper level call
        }
        else// used < n
        {
            int k;
            for(k=0; k<n; k++)
            {
                if ( ifusing[k] == 0)// not used
                {
                    ifusing[k] = ziji_no;//used

                    show(n, component, ifusing);

                    // used 多了1个
                    // ziji_sum + component[k]
                    try_huafen( n, component, used+1, ifusing,//
                                ziji_no, ziji_sum + component[k], target_len );

                    ifusing[k] = 0;
                }// if
            }// for
        }// used < n
    }// //ziji_sum < target_len
}

// main
int main()
{
    // input
    int n;
    int component[100];

    scanf("%d", &n);
    int i;
    for(i=0; i<n; i++)
        scanf("%d", &component[i]);

    int ifusing[100];
    for(i=0; i<n; i++)
        ifusing[i] = 0;// not use

    //
    found = 0;

    int used = 0;

    int ziji_no = 1;
    int ziji_sum = 0;
    int target_len = 6;

    try_huafen( n, component, used, ifusing,//
                ziji_no, ziji_sum, target_len );

    if (found==1)
        printf("YES\n");
    else
        printf("NO\n");

    return 0;
}
	