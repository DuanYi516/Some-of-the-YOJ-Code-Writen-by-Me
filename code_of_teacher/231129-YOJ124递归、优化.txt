
// ----------------------------------------------------------------------------------------------------

	
1，从盘面各个位置，开始找最长路径，修改all max length

max length = 0
2，当从某个位置开始（row, col, panmian, 当前总长）

	尝试上下左右走
               		如果有一个方向能够走(坐标有效，并且数值较小）
                     		 递归走下去（new row, new col, panmian, 当前总长：  总长 = 总长+1步骤）

	如果都不能走
  			 那么当前总长，与this max length比较

5 5
1 2 3 4 5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9

25

#include <stdio.h>

int max_length = 0;

#define UP 0
#define RIGHT 1
#define DOWN 2
#define LEFT 3

#define _DEBUG 0

// my_try
void my_try( int i, int j, int R, int C, int panmian[50][50], int cur_length)
{
    int can_go_from_here = 0;// true

    int dir;
    for(dir=UP; dir<= LEFT; dir++)
    {
        int newi;
        int newj;
        if (dir == UP)
        {
            newi = i-1;
            newj = j;
        }
        if (dir == RIGHT )
        {
            newi = i;
            newj = j+1;

        }
        if (dir == DOWN )
        {
            newi = i+1;
            newj = j;
        }
        if (dir == LEFT  )
        {
            newi = i;
            newj = j-1;
        }

        if (newi >=0 && newi<= R-1 && newj >=0 && newj<=C-1)
        {
            if (panmian[ newi] [newj] < panmian[i][j])
            {
                can_go_from_here =1;

                if (_DEBUG)
                    printf("new i=%d, newj=%d\n", newi, newj);
                my_try( newi, newj, R, C, panmian, cur_length +1);
            }
        } // if
    }// for

    if (can_go_from_here  ==0)
        if (cur_length >max_length )
        {
            if (_DEBUG)
                printf("cur_length = %d\n", cur_length );
            max_length  = cur_length ;
        }
}

// main
int main()
{
    int R;
    int C;
    scanf("%d%d", &R, &C);

    int panmian[50][50];
    int i;
    int j;
    for(i=0; i<R; i++)
        for(j=0; j<C; j++)
            scanf("%d", &panmian[i][j]);
    //
    //  from any point as beginning
    for(i=0; i<R; i++)
        for(j=0; j<C; j++)
        {
            int cur_length = 1;

            if (_DEBUG)
                printf("try from begin row=%d col=%d\n", i,j);

            my_try( i, j, R,C, panmian, cur_length);
        }

    printf("%d\n", max_length);
    return 0;
}


    //如果这个单元计算过length，直接返回*

    // 如果上下左右，四个单元格，坐标有效情况下，没有更小的单元格
    //      返回1
    // 上下左右，四个单元格，坐标有效情况下，有值小的单元格
    //      分别计算length，用递归
    //      取max
    //      max+加1给maxi,maxj单元格(也就是表示maxi,maxj计算过)


#include <stdio.h>

int max_length = 0;

#define UP 0
#define RIGHT 1
#define DOWN 2
#define LEFT 3
void show( int R, int C, int panmian[50][50], int length[50][50])
{
	printf("\n\n");
	int i,j;

	for(i=0; i<R; i++)
	{
		for(j=0; j<C; j++)
			printf("%d ", panmian[i][j]);
		printf("\n");
	}

	printf("\n");

	for(i=0; i<R; i++)
	{
		for(j=0; j<C; j++)
			printf("%d ", length[i][j]);
		printf("\n");
	}

	printf("\n");

}

// my_try
int my_try(int i, int j, int R, int C, int panmian[50][50], int length[50][50])
{
	//如果这个单元计算过length，直接返回

	// 如果上下左右，四个单元格，坐标有效，没有更小的单元格
	//      返回1
	// 上下左右，四个单元格，坐标有效，有值小的单元格
	//      分别计算length，用递归
	//      取max
	//      加1给maxi,maxj单元格(设置maxi,maxj计算过)
//printf("we want to know len of %d %d\n", i, j);

	if ( length[i][j] != 0)
		return length [i][j];

	int can_go_from_here = 0;// true

	int max_child_length = 0;

	int dir;
	for(dir=UP; dir<= LEFT; dir++)
	{
		int newi;
		int newj;
		if (dir == UP)
		{
			newi = i-1;
			newj = j;
		}
		if (dir == RIGHT )
		{
			newi = i;
			newj = j+1;

		}
		if (dir == DOWN )
		{
			newi = i+1;
			newj = j;
		}
		if (dir == LEFT  )
		{
			newi = i;
			newj = j-1;
		}

		if (newi >=0 && newi<= R-1 && newj >=0 && newj<=C-1)
		{
			if (panmian[ newi] [newj] < panmian[i][j])
			{
				can_go_from_here =1;

//printf("we recursivly do %d %d for %d %d\n",newi,newj, i, j);

				int child_length = my_try( newi, newj, R, C, panmian, length);
				if (child_length > max_child_length)
					max_child_length = child_length;
			}
		} // if
	}// for

	if( can_go_from_here == 0)
	{
		length[i][j] = 1;
		return length[i][j];
	}
	else//can_go_from_here == 0
	{
		length[i][j] = max_child_length+1;

		//( R,C,panmian, length);

		return length[i][j];
	}
}

// main
int main()
{
	int R;
	int C;
	scanf("%d%d", &R, &C);

	int panmian[50][50];
	int i;
	int j;
	for(i=0; i<R; i++)
		for(j=0; j<C; j++)
			scanf("%d", &panmian[i][j]);

	int length[50][50];
	for(i=0; i<R; i++)
		for(j=0; j<C; j++)
			length[i][j] = 0;

	//
	int maxi = 0;
	int maxj = 0;

	for(i=0; i<R; i++)
		for(j=0; j<C; j++)
		{
			// from any point
			// avoid redundancy computation
			my_try( i, j, R, C, panmian, length);
		}

	//show( R,C,panmian, length);

	max_length = 0;
	for(i=0; i<R; i++)
		for(j=0; j<C; j++)
			if ( length[i][j] >max_length)
				max_length = length[i][j];
				
	printf("%d\n", max_length);

	return 0;
}

