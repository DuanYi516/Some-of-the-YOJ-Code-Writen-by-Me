#include <stdio.h>

int max_path_length = 0;

// show_path
void show_path( int n, int step, int path_value[100])
{
	printf("path so far: ");
	int i;
	for(i=0; i<=step; i++)
		printf("%d ",path_value[i]);

	printf("\n");
}

#define DEBUG 0

// zhai_taozi
void zhai_taozi( int n, int step, //
                 int row, int col, int path_value[100], int pan_mian[100][100])
{
	path_value[step] = pan_mian[row][col];
	if (DEBUG)
		show_path(n, step, path_value);

	if ( row==0)
	{
		// 计算长度，和max_path_length 比较
		int i;
		int length = 0;
		for( i =0; i<=n-1; i++)
			length += path_value[i];
		if (DEBUG)
			printf("one full path length %d\n",length );

		if (length > max_path_length )
			max_path_length = length ;
	}
	else
	{
		int a;
		for (a=0; a<2; a++)
		{
			// a==0尝试往左上
			// a==1尝试往上

			if(a==0)
			{
				if( row-1>=0 && col-1>=0)
					if (pan_mian[row-1] [col-1] != 0)
						zhai_taozi(n, step+1, row-1, col-1, path_value, pan_mian);

			}
			else if (a==1)
			{
				if( row-1>=0 && col>=0)
					if (pan_mian[row-1] [col] != 0)
						zhai_taozi(n, step+1, row-1, col, path_value, pan_mian);
			}
		}// for
	}//else
}

// main
int main()
{
	// input
	int n;
	scanf("%d", &n);

	int pan_mian[100][100];
	int i;
	int j;

	for (i=0; i<=n-1; i++)
		for(j=0; j<=n-1; j++)
			pan_mian[i][j] = 0;

	for (i=0; i<=n-1; i++)
		for(j=0; j<=i; j++)
			scanf("%d", &pan_mian[i][j]);

	// zhai_taozi
	int path_value[100];
	int step = 0;
	i = n-1;

	for(j = 0; j<= n-1; j++) // n-1行，j列
		zhai_taozi(n, step, i, j, path_value, pan_mian);

	// output
	printf("%d\n", max_path_length );

	return 0;
}
