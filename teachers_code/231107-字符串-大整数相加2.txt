1.回顾strcmp
str1[200] = "33333333333333333333333333333333333";
str2[200] = "99999999999999999999999999999999999";
if (str1 < str2) //错的

if (strcmp( str1, str2) <0) 

-1<0按照字典序"33333333333333333333333333333333333"在"99999999999999999999999999999999999"
前面
	33333333333333333333333333333333333
	99999999999999999999999999999999999


2.两个字符串如何判断大小	
if (strcmp( str1, str2) <0) 


3.不等长的字符串，如何处理
char str1[100] = "999876";
char str2[100] = "33";
char str3[100];
int i;
int diff = strlen( str1) - strlen(str2);   // 6 - 2 = 4
for( i=0; i<  diff; i++)   // 0 1 2 3 
   str3[i] = '0';
for( i=0; i< strlen(str2); i++)  // 4+0  4+1    <- 0 1 
   str3[diff+i] = str2[i];
int last = strlen(str1);
str3[ last ] = '\0'; // 0 1 2 3 4 5 分别是00033，现在在6下标下加一个\0


4.如何开始考虑各种情况
（1）999 + 333	已经ok
（2）333 + 999	本质上就是（1）
（3）999 - 333	自己写一个
		203-188，注意有借位情况，有左边为0情况
（4）333-999	转换为999-333，然后注意负号


5. coverage涵盖

   char str1[100];
   char str2[100];
   char op[10];
   gets(op);
   gets(str1);
   gets(str2);
   
   char str1_new[100];
   char str2_new[100];
/*
+  
-999
-333
*/
if ( str1[0] == '+' || str1[0] >='1' && str1[0] <='9) 
    sign1 = +1;
if ( str1[0] == '1') 
    sign1  = -1;


if ( op[0] == '+' )
{

}
else if ( op[0] == '-')
{
}



5.展开各种情况（考虑所有情况）
+
	正正	999/333  	已经ok			333/999已经ok
	正负	999/-333   已经ok			333/-999转换为999-333
	负负  	-999/-333 用加法999+333注意负号		-333/-999用加法注意负号
	负正	-999/333	用减法注意负号		-333/999用减法

-
	正正	999/333  	用减法			333/999	用减法，注意负号
	正负	999/-333   转换为999+333		333/-999转换为333+999
	负负  	-999/-333 即333-999，转换为999-333注意负号	-333/-999即999-333
	负正	-999/333	即-999-333，转换为999+333注意负号	-333/999即-333-999，转换为333+999注意负号





#include <stdio.h>
#include <string.h>
/*

5437
2456
       7893
9873
2435
        12308

*/
int main()
{
     char str1[100 +1]; // 整数的数字个数为100，字符串末尾还得有一个\0
     char str2[100 +1];
     char str3[100 +1];
 
     gets( str1);
     gets( str2);
 
     int n = strlen(str1);

     // 从右边开始，取得字符，转换数字，加起来，注意进位
     int i;
     int jinwei=0;
     for( i= n-1;  i>=0; i--)
     {
            char zifu1 = str1[i];
            char zifu2 = str2[i];

            int shuzi1 = zifu1 - '0';
            int shuzi2 = zifu2 - '0';
            int jiaqilai = shuzi1 + shuzi2  + jinwei;

            //注意，加完了以后，可能有进位到下一步计算
            if( jiaqilai >=10)
             {
                jinwei  = 1;
                jiaqilai = jiaqilai -10;
                str3[i] = '0' + jiaqilai;
              }
             else
             {
                jinwei = 0;
                 str3[i] = '0' + jiaqilai;
             }
     }

     str3[n] = '\0'; // very important

     if ( jinwei ==1)
    {
          printf("%c", '1');
          puts(str3);
     }
    else
    { puts(str3);}

     return 0;   
}