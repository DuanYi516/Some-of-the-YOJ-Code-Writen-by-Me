#include <stdio.h>
#include <stdlib.h>

#include <string.h>
#include <memory.h>
#include <time.h>

// ShenFenZheng
struct ShenFenZheng// @FIXME
{
    char all[19]; //18位身份证+\0
    char riqi[9]; //8位日期+\0
};

// show
void show( ShenFenZheng* p, int count)
{
    // 0到count-1
    int i;
    for(i = 0; i<=count-1; i++)
    {
        printf("%s: %s\n", p[i].all, p[i].riqi);//......
    }
}

// merge_sort
void merge_sort(ShenFenZheng* p, int left, int right, ShenFenZheng* temp)
{
    if ( left >= right)//1个元素
        return;

    if (left +1 == right)//2个元素
    {
        if ( strcmp( p[left].riqi, p[right].riqi) >0) //日期 left > right// @FIXME
        {
            ShenFenZheng tt = p[left];
            p[left] = p[right];
            p[right] = tt;
        }
    }

    int middle = (left+right)/2;// 3个以上的元素

    // left 到middle
    // middle +1到right
    merge_sort( p, left, middle, temp);//递归处理左半部
    merge_sort( p, middle+1,right, temp); //递归处理右半部

    //左右半部已经处理好，合并左右半部，利用temp

    int head1= left;
    int tail1= middle;		//左半部的左右

    int head2= middle+ 1;
    int tail2= right;		//右半部的左右

    int i = left;// temp数组的下标

    //准备拷贝
    while (head1 <= tail1 && head2 <= tail2)
    {
        if (strcmp( p[head1].riqi, p[head2].riqi )<= 0)// @FIXME
        {
            temp[i] = p[head1];
            head1++;
        }
        else
        {
            temp[i] = p[head2];
            head2++;
        }

        i++;
    }

    //拷贝剩下部分
    while ( head1 <= tail1)
    {
        temp[i] = p[head1 ];
        head1 ++;
        i++;
    }

    while (head2 <= tail2)
    {
        temp[i] = p[head2];
        head2++;
        i++;
    }

    //copy from temp to p
    for (i = left; i <= right; i++)
    {
        p[i] = temp[i];
    }
}

// show_time
void show_time( clock_t start, clock_t end)
{
    double duration = (double)(end - start) //
                      / CLOCKS_PER_SEC * 1000; // 计算持续时间并转化为毫秒
    printf("Duration in milliseconds: %f\n", duration);
}

// init_shenfenzheng
void init_shenfenzheng( ShenFenZheng* pa)// @FIXME
{
    // 110108197709050043
    //             19770905

    int i;
    pa->all[18] = '\0';
    for(i=0; i<=17; i++)
    {
        int num = rand() % 10;
        pa->all[i] = '0'+ num;
    }

    pa->riqi[8] = '\0';
    for( i=0; i<=7; i++)
        pa->riqi[i] = pa->all[6+i ];
}

// init_shenfenzheng_list
void init_shenfenzheng_list( ShenFenZheng* pa, int count)// @FIXME
{
    int i;
    for( i = 0; i<count; i++)
        init_shenfenzheng( pa+i);//结构pa[i]   结构指针pa+i
}

#define N 10

// main
int main()
{
    ShenFenZheng* pa =
(ShenFenZheng*) malloc( N * sizeof(ShenFenZheng));// @FIXME

    ShenFenZheng* ptemp =
(ShenFenZheng*) malloc( N * sizeof(ShenFenZheng));// @FIXME

    init_shenfenzheng_list( pa, N);// @FIXME

    N<=100?  show( pa, N):   show( pa, 10);

    clock_t start = clock(); // 记录起始时间点
    merge_sort(pa, 0, N-1, ptemp);//0和N-1表示左右
    clock_t end = clock(); // 记录结束时间点
    show_time( start, end);

    N<=100?  show( pa, N):   show( pa, 10);

	free( (void*)pa);
	free( (void*)ptemp);

    return 0;
}
